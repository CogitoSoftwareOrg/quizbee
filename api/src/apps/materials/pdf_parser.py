
import fitz  # PyMuPDF –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
from io import BytesIO
from typing import Dict, List, Any
import logging
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)


def is_book(doc: fitz.Document) -> bool:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ PDF-–¥–æ–∫—É–º–µ–Ω—Ç –∫–Ω–∏–≥–æ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —ç–≤—Ä–∏—Å—Ç–∏–∫.
    
    –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏:
    1. –í—ã—Å–æ–∫–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ (–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
    2. –ù–∏–∑–∫–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫ —Ç–µ–∫—Å—Ç—É
    3. –§–æ—Ä–º–∞—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∫–Ω–∏–∂–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã)
    4. –ù–∞–ª–∏—á–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–Ω–∏–≥–∏ (–æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ, –≥–ª–∞–≤—ã)
    
    Args:
        doc: –û—Ç–∫—Ä—ã—Ç—ã–π PDF –¥–æ–∫—É–º–µ–Ω—Ç
        
    Returns:
        True –µ—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –∫–Ω–∏–≥–æ–π, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    page_count = len(doc)
    
    # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –∫–Ω–∏–≥–∏ (< 30 —Å—Ç—Ä–∞–Ω–∏—Ü)
    if page_count < 100:
        return False
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ N —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    sample_size = min(10, page_count)
    sample_pages = [0, page_count // 4, page_count // 2, 3 * page_count // 4, page_count - 1]
    sample_pages = [p for p in sample_pages if p < page_count][:sample_size]
    
    total_text_length = 0
    total_images = 0
    portrait_pages = 0
    
    for page_num in sample_pages:
        page = doc.load_page(page_num)
        
        # 1. –ü–æ–¥—Å—á–µ—Ç —Ç–µ–∫—Å—Ç–∞
        text = page.get_text()  # type: ignore
        text_length = len(text.strip())
        total_text_length += text_length
        
        # 2. –ü–æ–¥—Å—á–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images = page.get_images(full=True)  # type: ignore
        total_images += len(images)
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ (–∫–Ω–∏–≥–∏ –æ–±—ã—á–Ω–æ –≤ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏)
        rect = page.rect  # type: ignore
        if rect.height > rect.width:
            portrait_pages += 1
    
    # –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    avg_text_length = total_text_length / len(sample_pages) if sample_pages else 0
    
    # –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    avg_images = total_images / len(sample_pages) if sample_pages else 0
    
    # –ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
    portrait_ratio = portrait_pages / len(sample_pages) if sample_pages else 0
    
    logging.info(
        f"–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞: —Å—Ç—Ä–∞–Ω–∏—Ü={page_count}, "
        f"—Å—Ä–µ–¥–Ω—è—è_–¥–ª–∏–Ω–∞_—Ç–µ–∫—Å—Ç–∞={avg_text_length:.0f}, "
        f"—Å—Ä–µ–¥–Ω–µ–µ_–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π={avg_images:.1f}, "
        f"–ø–æ—Ä—Ç—Ä–µ—Ç–Ω—ã—Ö_—Å—Ç—Ä–∞–Ω–∏—Ü={portrait_ratio:.1%}"
    )
    
    # –≠–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏:
    # - –ú–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (>1500 —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ä–µ–¥–Ω–µ–º)
    # - –ú–∞–ª–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (<2 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
    # - –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è (>80%)
    # - –ú–Ω–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü (>50)
    
    is_book_candidate = (
        avg_text_length > 1000 and  # –í—ã—Å–æ–∫–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
        avg_images < 2 and  # –ú–∞–ª–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        portrait_ratio > 0.8 and  # –ü–æ—Ä—Ç—Ä–µ—Ç–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è
        page_count > 50  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    )
    
    if is_book_candidate:
        logging.info("üìö –î–æ–∫—É–º–µ–Ω—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –ö–ù–ò–ì–ê - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–≤–ª–µ–∫–∞—Ç—å—Å—è –Ω–µ –±—É–¥—É—Ç")
    else:
        logging.info("üìÑ –î–æ–∫—É–º–µ–Ω—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –ù–ï –ö–ù–ò–ì–ê - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É–¥—É—Ç –∏–∑–≤–ª–µ—á–µ–Ω—ã")
    
    return is_book_candidate


def parse_pdf(
    pdf_bytes: bytes, 
    min_width: int = 50, 
    min_height: int = 50,
    min_file_size: int = 3 * 1024  # 10 KB –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
) -> Dict[str, Any]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ PDF-—Ñ–∞–π–ª–∞, —Ñ–∏–ª—å—Ç—Ä—É—è —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç PyMuPDF4LLM –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown,
    —á—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è, –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç–∞–±–ª–∏—Ü,
    –º–Ω–æ–≥–æ–∫–æ–ª–æ–Ω–æ—á–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è.
    
    –í —Ç–µ–∫—Å—Ç –≤—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –º–∞—Ä–∫–µ—Ä—ã –≤–∏–¥–∞ {image_1}, {image_2} –∏ —Ç.–¥. –Ω–∞ –º–µ—Å—Ç–∞,
    –≥–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Ö –ø–æ–∑–∏—Ü–∏–π.
    
    –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:
    - –†–∞–∑–º–µ—Ä (—à–∏—Ä–∏–Ω–∞/–≤—ã—Å–æ—Ç–∞) - –æ—Ç—Å–µ–∏–≤–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ
    - –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ - –æ—Ç—Å–µ–∏–≤–∞–µ—Ç —á–µ—Ä–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã –∏ –¥—Ä—É–≥–æ–π "–º—É—Å–æ—Ä" —Å –Ω–∏–∑–∫–æ–π —ç–Ω—Ç—Ä–æ–ø–∏–µ–π

    Args:
        pdf_bytes: –ë–∞–π—Ç—ã PDF —Ñ–∞–π–ª–∞
        min_width: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è (–ø–∏–∫—Å–µ–ª–∏)
        min_height: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è (–ø–∏–∫—Å–µ–ª–∏)
        min_file_size: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–π—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 KB)

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ —Å–ø–∏—Å–∫–æ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:
        {
            "text": str,  # –¢–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏ {image_N}
            "images": List[Dict[str, any]]  # –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç bytes, ext, width, height, marker, size
        }

    Raises:
        Exception: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å PDF —Ñ–∞–π–ª
    """
    try:
        
      
        pdf_stream = BytesIO(pdf_bytes)
        doc = fitz.open(stream=pdf_stream, filetype="pdf")
        page_count = len(doc)
        logging.info(f"PDF –æ—Ç–∫—Ä—ã—Ç. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {page_count}")

    
        images = []
        image_positions = {}  
        is_book_doc = is_book(doc)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        stats = {
            "total": 0,
            "filtered_size": 0,
            "filtered_dimensions": 0,
            "filtered_duplicates": 0,
            "accepted": 0,
            "full_page_screenshots": 0
        }
        
        # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è)
        seen_xrefs = set()  
        
        # –ü–æ—Ä–æ–≥ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–≤ —Å–∏–º–≤–æ–ª–∞—Ö), —á—Ç–æ–±—ã —Ä–µ—à–∞—Ç—å, –¥–µ–ª–∞—Ç—å –ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        MIN_TEXT_LENGTH = 100

        # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –∫–Ω–∏–≥–∞ - –Ω–µ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if is_book_doc:
            logging.info(
                f"–î–æ–∫—É–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –∫–Ω–∏–≥–æ–π - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è"
            )
        else:
            global_image_counter = 1
            
            for page_num in range(page_count):
                page = doc.load_page(page_num)
                
                
                page_text = page.get_text()  # type: ignore
                text_length = len(page_text.strip())
                
                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –æ—á–µ–Ω—å –º–∞–ª–æ, —Å–æ–∑–¥–∞—ë–º –ø–æ–ª–Ω–æ—Ä–∞–∑–º–µ—Ä–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                if text_length < MIN_TEXT_LENGTH:
                    
                   
                    pix = page.get_pixmap()  # type: ignore 
                    img_bytes = pix.tobytes("png")  # type: ignore
                    
                    marker = f"{{quizbee_unique_image_{global_image_counter}}}"
                    
                    images.append({
                        "bytes": img_bytes,
                        "ext": "png",
                        "width": pix.width,  # type: ignore
                        "height": pix.height,  # type: ignore
                        "page": page_num + 1,
                        "index": 0,  
                        "marker": marker,
                        "size": len(img_bytes),
                        "is_full_page": True
                    })
                    
                    image_positions[page_num] = [(0, marker)]
                    global_image_counter += 1
                    stats["full_page_screenshots"] += 1
                    
                    continue  
                
                image_list = page.get_images(full=True)  # type: ignore

                if not image_list:
                    continue
                    
                logging.info(
                    f"–ù–∞–π–¥–µ–Ω–æ {len(image_list)} –∏—Å—Ö–æ–¥–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num + 1}"
                )
                
                # –ü–æ–ª—É—á–∞–µ–º bbox –¥–ª—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                image_rects = []
                for image_index, img in enumerate(image_list):
                    xref = img[0]
                    stats["total"] += 1
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                    if xref in seen_xrefs:
                        stats["filtered_duplicates"] += 1
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    img_instances = page.get_image_rects(xref)  # type: ignore
                    if img_instances:
                        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ (–æ–±—ã—á–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑)
                        rect = img_instances[0]
                        
                        base_image = doc.extract_image(xref)
                        width = base_image.get("width", 0)
                        height = base_image.get("height", 0)
                        file_size = len(base_image["image"])
                        
                        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
                        if width < min_width or height < min_height:
                            stats["filtered_dimensions"] += 1
                            continue
                        
                        if file_size < min_file_size:
                            stats["filtered_size"] += 1
                            continue
                        
                        seen_xrefs.add(xref)
                        stats["accepted"] += 1
                        
                        image_rects.append({
                            "xref": xref,
                            "rect": rect,
                            "image_data": base_image,
                            "width": width,
                            "height": height,
                            "file_size": file_size
                        })
                
                if not image_rects:
                    continue
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –±–ª–∏–∑–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                # –ü–æ—Ä–æ–≥ –±–ª–∏–∑–æ—Å—Ç–∏ –≤ –ø—É–Ω–∫—Ç–∞—Ö (points) - –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–ª–∏–∂–µ, –æ–±—ä–µ–¥–∏–Ω—è–µ–º
                PROXIMITY_THRESHOLD = 50  # –ø–∏–∫—Å–µ–ª–µ–π
                
                def group_nearby_images(img_rects):
                    """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –±–ª–∏–∑–∫–æ –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É"""
                    if not img_rects:
                        return []
                    
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ (—Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑)
                    sorted_imgs = sorted(img_rects, key=lambda x: x["rect"].y0)
                    
                    groups = []
                    current_group = [sorted_imgs[0]]
                    
                    for img in sorted_imgs[1:]:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø–µ
                        last_img = current_group[-1]
                        
                        # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
                        vertical_dist = img["rect"].y0 - last_img["rect"].y1
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
                        horizontal_overlap = not (
                            img["rect"].x1 < last_img["rect"].x0 or 
                            img["rect"].x0 > last_img["rect"].x1
                        )
                        
                        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–ª–∏–∑–∫–æ –∏–ª–∏ –µ—Å—Ç—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
                        if vertical_dist < PROXIMITY_THRESHOLD or horizontal_overlap:
                            current_group.append(img)
                        else:
                            groups.append(current_group)
                            current_group = [img]
                    
                    groups.append(current_group)
                    return groups
                
                image_groups = group_nearby_images(image_rects)
                page_img_positions = []
                
                for group in image_groups:
                    if len(group) == 1:
                        # –û–¥–∏–Ω–æ—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–±–ª–∞—Å—Ç–∏ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
                        # —á—Ç–æ–±—ã –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç (–ø–æ–¥–ø–∏—Å–∏, —Ç–µ–∫—Å—Ç –∏ —Ç.–¥.)
                        rect = group[0]["rect"]
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã —Å–æ –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω
                        padding_left = 30
                        padding_right = 30
                        padding_top = 30
                        padding_bottom = 30
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏
                        page_rect = page.rect  # type: ignore
                        
                        clip_rect = fitz.Rect(  # type: ignore
                            max(0, rect.x0 - padding_left),
                            max(0, rect.y0 - padding_top),
                            min(page_rect.width, rect.x1 + padding_right),
                            min(page_rect.height, rect.y1 + padding_bottom)
                        )
                        
                        # –°–æ–∑–¥–∞—ë–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–±–ª–∞—Å—Ç–∏
                        pix = page.get_pixmap(matrix=fitz.Matrix(2, 2), clip=clip_rect)  # type: ignore
                        img_bytes = pix.tobytes("png")  # type: ignore
                        
                        marker = f"{{quizbee_unique_image_{global_image_counter}}}"
                        
                        images.append({
                            "bytes": img_bytes,
                            "ext": "png",
                            "width": pix.width,  # type: ignore
                            "height": pix.height,  # type: ignore
                            "page": page_num + 1,
                            "index": len(images) + 1,
                            "marker": marker,
                            "size": len(img_bytes),
                        })
                        
                        page_img_positions.append((rect.y0, marker))
                        global_image_counter += 1
                        
                    else:
                        # –ì—Ä—É–ø–ø–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–±–ª–∞—Å—Ç–∏
                        logging.info(
                            f"–ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –∏–∑ {len(group)} –±–ª–∏–∑–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä. {page_num + 1}, "
                            f"—Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç"
                        )
                        
                        # –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–π bbox –¥–ª—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ
                        min_x = min(img["rect"].x0 for img in group)
                        min_y = min(img["rect"].y0 for img in group)
                        max_x = max(img["rect"].x1 for img in group)
                        max_y = max(img["rect"].y1 for img in group)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã —Å–æ –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      
                        padding_left = 30
                        padding_right = 30
                        padding_top = 30
                        padding_bottom = 30
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏
                        page_rect = page.rect  # type: ignore
                        
                        clip_rect = fitz.Rect(  # type: ignore
                            max(0, min_x - padding_left),
                            max(0, min_y - padding_top),
                            min(page_rect.width, max_x + padding_right),
                            min(page_rect.height, max_y + padding_bottom)
                        )
                        
                        # –°–æ–∑–¥–∞—ë–º —Å–∫—Ä–∏–Ω—à–æ—Ç —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏
                        pix = page.get_pixmap(matrix=fitz.Matrix(2, 2), clip=clip_rect)  # type: ignore
                        img_bytes = pix.tobytes("png")  # type: ignore
                        
                        marker = f"{{quizbee_unique_image_{global_image_counter}}}"
                        
                        images.append({
                            "bytes": img_bytes,
                            "ext": "png",
                            "width": pix.width,  # type: ignore
                            "height": pix.height,  # type: ignore
                            "page": page_num + 1,
                            "index": len(images) + 1,
                            "marker": marker,
                            "size": len(img_bytes),
                            "is_grouped": True,
                            "group_size": len(group)
                        })
                        
                        page_img_positions.append((min_y, marker))
                        global_image_counter += 1
                        stats["full_page_screenshots"] += 1
                
                if page_img_positions:
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ Y-–ø–æ–∑–∏—Ü–∏–∏ (—Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑)
                    page_img_positions.sort(key=lambda x: x[0])
                    image_positions[page_num] = page_img_positions

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ —Å –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ–º –º–∞—Ä–∫–µ—Ä–æ–≤
        md_text_parts = []
        
        for page_num in range(page_count):
            
            
            page = doc.load_page(page_num)
            page_text = page.get_text()  # type: ignore
        
            # –ï—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –≤—Å—Ç–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã
            if page_num in image_positions:
                # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã/–±–ª–æ–∫–∏
                paragraphs = re.split(r'\n\n+', page_text)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                num_paragraphs = len(paragraphs)
                num_images = len(image_positions[page_num])
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–µ–∂–¥—É –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞–º–∏
                # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ö —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ
                result_parts = []
                images_inserted = 0
                
                for i, para in enumerate(paragraphs):
                    result_parts.append(para)
                    
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ N-–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
                    if images_inserted < num_images and num_paragraphs > 0:
                        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –≤—Å—Ç–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
                        insert_threshold = (i + 1) / num_paragraphs
                        image_threshold = (images_inserted + 1) / num_images
                        
                        if insert_threshold >= image_threshold:
                            _, marker = image_positions[page_num][images_inserted]
                            result_parts.append(f"\n{marker}\n")
                            images_inserted += 1
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–Ω–µ—Ü
                while images_inserted < num_images:
                    _, marker = image_positions[page_num][images_inserted]
                    result_parts.append(f"\n{marker}\n")
                    images_inserted += 1
                
                page_text = "\n\n".join(result_parts)
            
            md_text_parts.append(page_text)
        
        md_text = "\n\n-----\n\n".join(md_text_parts)
        
        doc.close()

        
        logging.info(
            f"–¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏, –¥–ª–∏–Ω–∞: {len(md_text)} —Å–∏–º–≤–æ–ª–æ–≤"
        )

        return {
            "text": md_text,
            "images": images,
        }

    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ PDF —Ñ–∞–π–ª–∞: {str(e)}")

