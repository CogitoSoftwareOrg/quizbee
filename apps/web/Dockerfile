# syntax=docker/dockerfile:1.7
FROM node:20-alpine AS build
WORKDIR /repo

# Install git (required by some pnpm dependencies)
RUN apk add --no-cache git

ENV COREPACK_ENABLE_DOWNLOADS=1
RUN corepack enable && corepack prepare pnpm@10.20.0 --activate

COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
RUN printf "store-dir=/pnpm\nshared-workspace-lockfile=true\n" > /etc/pnpmrc

COPY pkgs/js pkgs/js

# Install dependencies for workspace packages first
# This ensures all workspace dependencies are resolved before installing app dependencies
# Using BuildKit cache mount for pnpm store (node_modules created as regular layer)
RUN --mount=type=cache,id=pnpm-store,target=/pnpm \
    PNPM_STORE_DIR=/pnpm \
    pnpm install --frozen-lockfile --filter "@quizbee/ui-astro" --filter "@quizbee/ui-svelte-daisy" --include-workspace-root=false

# Now install app dependencies with workspace packages available
COPY apps/web/package.json apps/web/
RUN --mount=type=cache,id=pnpm-store,target=/pnpm \
    PNPM_STORE_DIR=/pnpm \
    pnpm install --frozen-lockfile --filter ./apps/web...

COPY apps/web apps/web

ARG PUBLIC_APP_URL
ARG PUBLIC_PB_URL
ARG PB_URL
ARG PB_EMAIL
ARG PB_PASSWORD
ENV PUBLIC_APP_URL=$PUBLIC_APP_URL PUBLIC_PB_URL=$PUBLIC_PB_URL PB_URL=$PB_URL PB_EMAIL=$PB_EMAIL PB_PASSWORD=$PB_PASSWORD

RUN pnpm -C apps/web build

RUN mkdir -p /out && \
    pnpm --filter ./apps/web deploy --prod --legacy /out && \
    cp -r apps/web/dist /out/dist

### 2) Runtime
FROM node:20-alpine AS runner
WORKDIR /app
ENV NODE_ENV=production

COPY --from=build /out/ ./

EXPOSE 3000
ENV HOST=0.0.0.0 PORT=3000
CMD ["node", "dist/server/entry.mjs"]
