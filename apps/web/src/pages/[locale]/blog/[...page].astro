---
// src/pages/[locale]/blog/[page].astro
import type { GetStaticPaths, Page } from "astro";
import { getCollection } from "astro:content";
import { Image } from "astro:assets";

import Root from "@/layouts/Root.astro";
import { useTranslatedPath } from "@/i18n/utils";
import type { languages } from "@/i18n/ui";

type CatInfo = {
  name: string;
  count: number;
  cover?: string | null;
  description?: string | null;
};

// SSG пагинация по всем категориям внутри локали + сбор категорийного грида
export const getStaticPaths: GetStaticPaths = async ({ paginate }) => {
  const all = await getCollection("blog");

  // группируем по локали
  const byLocale = new Map<string, any[]>();
  for (const p of all) {
    const loc = p.data.locale;
    if (!byLocale.has(loc)) byLocale.set(loc, []);
    byLocale.get(loc)!.push(p);
  }

  const pageSize = 12;
  const paths: any[] = [];

  for (const [locale, list] of byLocale.entries()) {
    // сортировка по дате (новые сверху)
    list.sort((a, b) => {
      const da = new Date(
        a.data.article?.datePublished ?? a.data.article?.dateModified ?? 0
      ).getTime();
      const db = new Date(
        b.data.article?.datePublished ?? b.data.article?.dateModified ?? 0
      ).getTime();
      return db - da;
    });

    // собрать категории для грида (count + обложка из самого свежего поста)
    const catMap = new Map<string, CatInfo>();
    for (const p of list) {
      const cat = p.data.category ?? "general";
      const meta = catMap.get(cat);
      if (!meta) {
        catMap.set(cat, {
          name: cat,
          count: 1,
          cover: p.data.article?.coverUrl ?? null,
          description: p.data.meta?.description ?? null,
        });
      } else {
        meta.count += 1;
        // обложка — оставляем от самого свежего (т.к. list уже отсортирован)
      }
    }
    const categories = Array.from(catMap.values()).sort(
      (a, b) => b.count - a.count
    );

    paths.push(
      ...paginate(list, {
        pageSize,
        params: { locale },
        props: { locale, categories },
      })
    );
  }

  return paths;
};

const { page, locale, categories } = Astro.props as {
  page: Page;
  locale: keyof typeof languages;
  categories: CatInfo[];
};

const posts = page.data;
const tp = useTranslatedPath(locale);

// SEO
const title = "Blog";
const desc = `All articles (${page.currentPage} of ${page.lastPage})`;

// ссылки для пагинации
const pageHref = (n: number) => tp(`/blog/${n}`);
---

<Root title={title} description={desc} active="blog">
  <!-- HERO -->
  <section
    class="mb-8 rounded-2xl bg-gradient-to-r from-primary-70 to-secondary-70 border p-6 md:p-8"
  >
    <div
      class="flex flex-col md:flex-row md:items-center md:justify-between gap-3"
    >
      <div>
        <h1 class="text-3xl md:text-4xl font-bold tracking-tight">Blog</h1>
        <p class="mt-2 text-sm text-muted-foreground">{desc}</p>
      </div>
      <nav class="text-sm text-muted-foreground">
        <a href={tp("/")} class="hover:underline">Home</a>
        <span class="mx-1">/</span>
        <span>Blog</span>
      </nav>
    </div>

    <!-- Грид категорий (топ-8, можно больше) -->
    {
      categories.length > 0 && (
        <div class="mt-6 grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-3">
          {categories.slice(0, 8).map((c) => (
            <a
              href={tp(`/blog/${c.name}`)}
              class="group overflow-hidden rounded-xl border bg-card shadow-sm hover:shadow-md transition"
            >
              <div class="relative aspect-[16/9] bg-muted">
                {c.cover ? (
                  <div class="relative w-full h-full aspect-[16/9] max-h-[calc(20vh)] mx-auto mt-6">
                    <Image
                      src={c.cover}
                      alt={c.name}
                      width={1920}
                      height={1080}
                      widths={[480, 768, 1024, 1280, 1600, 1920]}
                      sizes="(min-width: 1024px) 800px, 100vw"
                      fit="cover"
                      class="h-full w-full object-cover rounded-2xl shadow-sm"
                      fetchpriority="high"
                      loading="eager"
                    />
                  </div>
                ) : (
                  <div class="absolute inset-0 grid place-items-center text-xs text-muted-foreground">
                    {c.name}
                  </div>
                )}
              </div>
              <div class="p-3">
                <div class="flex items-center justify-between">
                  <h3 class="capitalize font-medium">{c.name}</h3>
                  <span class="text-xs text-muted-foreground">{c.count}</span>
                </div>
                {c.description && (
                  <p class="mt-1 line-clamp-2 text-xs text-muted-foreground">
                    {c.description}
                  </p>
                )}
              </div>
            </a>
          ))}
        </div>
      )
    }
  </section>

  <!-- Грид постов -->
  <section class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mb-8">
    {
      posts.map((post: any) => {
        const href = tp(`/blog/${post.data.category}/${post.data.slug}`);
        const cover = post.data.article?.coverUrl ?? null;
        const date = post.data.article?.datePublished
          ? new Date(post.data.article.datePublished).toLocaleDateString(locale)
          : "";

        return (
          <a
            href={href}
            class="group rounded-2xl border bg-card shadow-sm overflow-hidden hover:shadow-md transition"
          >
            <div class="relative aspect-[16/9] bg-muted overflow-hidden">
              {cover ? (
                <div class="relative w-full h-full aspect-[16/9] max-h-[calc(50vh)] mx-auto mt-6">
                  <Image
                    src={cover}
                    alt={post.data.meta?.title}
                    width={1920}
                    height={1080}
                    widths={[480, 768, 1024, 1280, 1600, 1920]}
                    sizes="(min-width: 1024px) 800px, 100vw"
                    fit="cover"
                    class="h-full w-full object-cover rounded-2xl shadow-sm"
                    fetchpriority="high"
                    loading="eager"
                  />
                </div>
              ) : (
                <div class="absolute inset-0 grid place-items-center text-xs text-muted-foreground">
                  no cover
                </div>
              )}
            </div>

            <div class="p-4">
              <div class="mb-1 flex items-center gap-2 text-xs text-muted-foreground">
                <span class="capitalize">{post.data.category}</span>
                {date && (
                  <>
                    <span>·</span>
                    <time datetime={post.data.article?.datePublished}>
                      {date}
                    </time>
                  </>
                )}
                {post.data.article?.readingTimeMin && (
                  <>
                    <span>·</span>
                    <span>{post.data.article.readingTimeMin} min</span>
                  </>
                )}
              </div>
              <h2 class="text-base md:text-lg font-semibold leading-snug group-hover:underline line-clamp-2">
                {post.data.meta?.title ?? post.data.slug}
              </h2>
              {post.data.meta?.description && (
                <p class="mt-2 text-sm text-muted-foreground line-clamp-2">
                  {post.data.meta.description}
                </p>
              )}
              {Array.isArray(post.data.article?.tags) &&
                post.data.article.tags.length > 0 && (
                  <ul class="mt-3 flex flex-wrap gap-2">
                    {post.data.article.tags.slice(0, 3).map((t: string) => (
                      <li class="rounded-full bg-muted px-2.5 py-0.5 text-[11px] text-muted-foreground">
                        #{t}
                      </li>
                    ))}
                  </ul>
                )}
            </div>
          </a>
        );
      })
    }
  </section>

  <!-- Пагинация -->
  {
    page.lastPage > 1 && (
      <nav
        class="mt-10 flex items-center justify-center gap-2"
        aria-label="Pagination"
      >
        {page.url.prev ? (
          <a
            href={page.url.prev}
            rel="prev"
            class="rounded-md border px-3 py-2 text-sm hover:bg-muted/60"
          >
            ← Prev
          </a>
        ) : (
          <span class="rounded-md border px-3 py-2 text-sm opacity-40 cursor-not-allowed">
            ← Prev
          </span>
        )}

        {Array.from({ length: page.lastPage }, (_, i) => i + 1).map((n) => {
          const isActive = n === page.currentPage;
          return isActive ? (
            <span
              class="rounded-md px-3 py-2 text-sm font-medium bg-foreground text-background border border-foreground"
              aria-current="page"
            >
              {n}
            </span>
          ) : (
            <a
              href={pageHref(n)}
              class="rounded-md border px-3 py-2 text-sm hover:bg-muted/60"
            >
              {n}
            </a>
          );
        })}

        {page.url.next ? (
          <a
            href={page.url.next}
            rel="next"
            class="rounded-md border px-3 py-2 text-sm hover:bg-muted/60"
          >
            Next →
          </a>
        ) : (
          <span class="rounded-md border px-3 py-2 text-sm opacity-40 cursor-not-allowed">
            Next →
          </span>
        )}
      </nav>
    )
  }
</Root>
