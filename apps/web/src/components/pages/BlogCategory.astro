---
import type { Page } from "astro";
import { Image } from "astro:assets";

import Root from "@/layouts/Root.astro";
import { useTranslatedPath } from "@/i18n/utils";
import { defaultLang, type languages } from "@/i18n/ui";

import CategoryCover from "@/assets/images/pchel.png";

const { page } = Astro.props as {
  page: Page;
};

const { locale = defaultLang, category } = Astro.params as {
  locale?: keyof typeof languages;
  category: string;
};

const tp = useTranslatedPath(locale);

const posts = page.data;
const title = `Blog · ${category}`;
const desc = `Articles in “${category}” (${page.currentPage} of ${page.lastPage})`;

// Вспом. форматтер ссылки (если нужен canonical/индексация первой страницы — добавь index.astro)
const pageHref = (n: number) => tp(`/blog/${category}/page/${n}`);
---

<Root title={title} description={desc} active="blog">
  <!-- HERO категории -->
  <section
    class="mb-8 rounded-2xl bg-linear-to-r from-primary-70 to-secondary-70 border p-6 md:p-8 border-base-300"
  >
    <div
      class="flex flex-col md:flex-row md:items-center md:justify-between gap-3"
    >
      <div>
        <h1 class="text-3xl md:text-4xl font-bold tracking-tight capitalize">
          {category}
        </h1>
        <p class="mt-2 text-sm text-muted-foreground">
          {desc}
        </p>
      </div>
      <nav class="text-sm text-muted-foreground">
        <a href={tp("/blog")} class="hover:underline">Blog</a>
        <span class="mx-1">/</span>
        <span class="capitalize">{category}</span>
      </nav>
    </div>

    <div
      class="relative w-full h-full aspect-video max-h-[calc(40vh)] mx-auto mt-6"
    >
      <Image
        src={CategoryCover}
        alt={category}
        width={1920}
        height={1080}
        widths={[480, 768, 1024, 1280, 1600, 1920]}
        sizes="(min-width: 1024px) 800px, 100vw"
        fit="cover"
        class="h-full w-full object-cover rounded-2xl shadow-sm"
        fetchpriority="high"
        loading="eager"
      />
    </div>
  </section>

  <!-- GRID карточек -->
  <section class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mb-8">
    {
      posts.map((post: any) => {
        const href = tp(`/blog/${post.data.category}/${post.data.slug}`);
        const cover = post.data.article?.coverUrl ?? null;
        const date = post.data.article?.datePublished
          ? new Date(post.data.article.datePublished).toLocaleDateString(locale)
          : "";

        return (
          <a
            href={href}
            class="group rounded-2xl border bg-card shadow-sm overflow-hidden hover:shadow-md transition border-base-300"
          >
            {/* preview image (надёжно для любых remote URL) */}
            <div class="relative aspect-video bg-muted overflow-hidden">
              {cover ? (
                <div class="relative w-full h-full aspect-video max-h-[calc(50vh)] mx-auto mt-6">
                  <Image
                    src={cover}
                    alt={post.data.meta?.title}
                    width={1920}
                    height={1080}
                    widths={[480, 768, 1024, 1280, 1600, 1920]}
                    sizes="(min-width: 1024px) 800px, 100vw"
                    fit="cover"
                    class="h-full w-full object-cover rounded-2xl shadow-sm"
                    fetchpriority="high"
                    loading="eager"
                  />
                </div>
              ) : (
                <div class="absolute inset-0 grid place-items-center text-xs text-muted-foreground">
                  no cover
                </div>
              )}
            </div>

            <div class="p-4">
              <div class="mb-1 flex items-center gap-2 text-xs text-muted-foreground">
                <span class="capitalize">{post.data.category}</span>
                {date && (
                  <>
                    <span>·</span>
                    <time datetime={post.data.article?.datePublished}>
                      {date}
                    </time>
                  </>
                )}
                {post.data.article?.readingTimeMin && (
                  <>
                    <span>·</span>
                    <span>{post.data.article.readingTimeMin} min</span>
                  </>
                )}
              </div>
              <h2 class="text-base md:text-lg font-semibold leading-snug group-hover:underline line-clamp-2">
                {post.data.meta?.title ?? post.data.slug}
              </h2>
              {post.data.meta?.description && (
                <p class="mt-2 text-sm text-muted-foreground line-clamp-2">
                  {post.data.meta.description}
                </p>
              )}
              {Array.isArray(post.data.article?.tags) &&
                post.data.article.tags.length > 0 && (
                  <ul class="mt-3 flex flex-wrap gap-2">
                    {post.data.article.tags.slice(0, 3).map((t: string) => (
                      <li class="rounded-full bg-muted px-2.5 py-0.5 text-[11px] text-muted-foreground">
                        #{t}
                      </li>
                    ))}
                  </ul>
                )}
            </div>
          </a>
        );
      })
    }
  </section>

  <!-- PAGINATION -->
  {
    page.lastPage > 1 && (
      <nav
        class="mt-10 flex items-center justify-center gap-2"
        aria-label="Pagination"
      >
        {/* Prev */}
        {page.url.prev ? (
          <a
            href={page.url.prev}
            rel="prev"
            class="rounded-md border px-3 py-2 text-sm hover:bg-muted/60"
          >
            ← Prev
          </a>
        ) : (
          <span class="rounded-md border px-3 py-2 text-sm opacity-40 cursor-not-allowed">
            ← Prev
          </span>
        )}

        {/* Pages window */}
        {Array.from({ length: page.lastPage }, (_, i) => i + 1).map((n) => {
          const isActive = n === page.currentPage;
          return isActive ? (
            <span
              class="rounded-md px-3 py-2 text-sm font-medium bg-foreground text-background border border-foreground"
              aria-current="page"
            >
              {n}
            </span>
          ) : (
            <a
              href={pageHref(n)}
              class="rounded-md border px-3 py-2 text-sm hover:bg-muted/60"
            >
              {n}
            </a>
          );
        })}

        {/* Next */}
        {page.url.next ? (
          <a
            href={page.url.next}
            rel="next"
            class="rounded-md border px-3 py-2 text-sm hover:bg-muted/60"
          >
            Next →
          </a>
        ) : (
          <span class="rounded-md border px-3 py-2 text-sm opacity-40 cursor-not-allowed">
            Next →
          </span>
        )}
      </nav>
    )
  }
</Root>
