---
import { Image } from "astro:assets";

import Root from "@/layouts/Root.astro";
import { useTranslatedPath } from "@/i18n/utils";
import { defaultLang, type languages } from "@/i18n/ui";

const { meta, article, content, toc, previousPost, nextPost } = Astro.props as {
  meta: {
    title: string;
    description: string;
    image: string;
  };
  article: {
    datePublished: string;
    dateModified: string;
    authors: string[];
    tags: string[];
    coverUrl: string;
    readingTimeMin: number;
  };
  content: string;
  toc: any[];
  previousPost: {
    category: string;
    slug: string;
    title: string;
  };
  nextPost: {
    category: string;
    slug: string;
    title: string;
  };
};

const { locale = defaultLang } = Astro.params as {
  locale?: keyof typeof languages;
};

const tp = useTranslatedPath(locale);

const jsonLd = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  headline: meta.title,
  description: meta.description ?? "",
  image: meta.image ? [meta.image] : undefined,
  datePublished: article.datePublished ?? undefined,
  dateModified: article.dateModified ?? undefined,
  author: (article.authors ?? []).map((name: string) => ({
    "@type": "Person",
    name,
  })),
  mainEntityOfPage: Astro.url.toString(),
};
---

<Root
  title={meta.title}
  description={meta.description}
  image={meta.image}
  structuredData={jsonLd}
  active="blog"
>
  <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-10">
    <!-- HEADER -->
    <header class="mb-10 text-center lg:text-left">
      <nav
        class="text-sm text-muted-foreground mb-4 flex justify-center lg:justify-start space-x-1"
      >
        <a href={`/${Astro.params.locale}/blog`} class="hover:underline">Blog</a
        >
        <span>/</span>
        <a
          href={`/${Astro.params.locale}/blog/${Astro.params.category}`}
          class="hover:underline capitalize"
        >
          {Astro.params.category}
        </a>
      </nav>

      <h1 class="text-4xl md:text-5xl font-bold tracking-tight mb-3">
        {meta.title}
      </h1>

      <p class="text-sm text-muted-foreground">
        {new Date(article.datePublished).toLocaleDateString()} · {
          article.readingTimeMin
        } min read
      </p>

      {
        article.coverUrl && (
          <div class="relative w-full h-full aspect-video max-h-[calc(50vh)] mx-auto mt-6">
            <Image
              src={article.coverUrl}
              alt={meta.title}
              width={1920}
              height={1080}
              widths={[480, 768, 1024, 1280, 1600, 1920]}
              sizes="(min-width: 1024px) 800px, 100vw"
              fit="cover"
              class="h-full w-full object-cover rounded-2xl shadow-sm"
              fetchpriority="high"
              loading="eager"
            />
          </div>
        )
      }
    </header>

    <!-- GRID -->
    <div class="grid grid-cols-12 gap-4">
      <!-- LEFT ASIDE (ToC) -->
      <aside
        class="col-span-12 lg:col-span-2 order-2 lg:order-1 hidden lg:block"
      >
        <div class="sticky top-20 space-y-4">
          {
            Array.isArray(toc) && toc.length > 0 && (
              <nav
                class="rounded-xl bg-card p-4 shadow-sm"
                aria-label="Table of contents"
              >
                <p class="font-medium mb-3">On this page</p>
                <ul class="toc-list text-sm space-y-1 text-muted-foreground">
                  {toc.map((item: any) => (
                    <li class={item.level === 3 ? "pl-4" : ""}>
                      <a
                        href={`#${item.id}`}
                        class="toc-link block rounded px-2 py-1 hover:bg-muted/60 transition-colors"
                      >
                        {item.text}
                      </a>
                    </li>
                  ))}
                </ul>
              </nav>
            )
          }
        </div>
      </aside>

      <!-- MAIN CONTENT -->
      <main
        class="col-span-12 lg:col-span-7 order-1 lg:order-2 lg:border-x border-base-300 px-6"
      >
        <article
          class="prose prose-neutral max-w-none prose-img:rounded-lg prose-headings:scroll-mt-24"
        >
          <div set:html={content} />
        </article>

        <!-- Prev / Next -->
        {
          (previousPost || nextPost) && (
            <nav class="mt-12 grid gap-4 sm:grid-cols-2">
              {previousPost ? (
                <a
                  href={tp(
                    `/blog/${previousPost.category}/${previousPost.slug}`
                  )}
                  class="group rounded-xl border bg-card p-4 shadow-sm hover:bg-muted/40 transition text-left"
                  rel="prev"
                >
                  <div class="text-xs text-muted-foreground mb-1">
                    ← Previous
                  </div>
                  <div class="font-medium group-hover:underline line-clamp-2">
                    {previousPost.title}
                  </div>
                </a>
              ) : (
                <span />
              )}
              {nextPost ? (
                <a
                  href={tp(`/blog/${nextPost.category}/${nextPost.slug}`)}
                  class="group rounded-xl border bg-card p-4 shadow-sm hover:bg-muted/40 transition text-right"
                  rel="next"
                >
                  <div class="text-xs text-muted-foreground mb-1">Next →</div>
                  <div class="font-medium group-hover:underline line-clamp-2">
                    {nextPost.title}
                  </div>
                </a>
              ) : (
                <span />
              )}
            </nav>
          )
        }

        <!-- Tags -->
        {
          article.tags?.length > 0 && (
            <div class="mt-10 pt-6 border-t">
              <ul class="flex flex-wrap gap-2">
                {article.tags.map((t: string) => (
                  <li class="rounded-full bg-muted px-3 py-1 text-xs text-muted-foreground">
                    #{t}
                  </li>
                ))}
              </ul>
            </div>
          )
        }
      </main>

      <!-- RIGHT ASIDE -->
      <aside class="col-span-12 lg:col-span-3 order-3 space-y-6">
        <div class="sticky top-20 space-y-4">
          <!-- Author (можно включить при необходимости) -->
          <!--
          <div class="rounded-xl bg-card p-4 shadow-sm">
            <p class="font-medium mb-2">Author</p>
            <p class="text-sm text-muted-foreground">
              {(article.authors && article.authors[0]) || "Editorial Team"}
            </p>
          </div>
          -->

          <div class="rounded-xl bg-card p-4 shadow-sm">
            <p class="font-medium mb-2">Related</p>
            <ul class="text-sm list-disc pl-4 space-y-1 text-muted-foreground">
              <li><a class="hover:underline" href="#">Adaptive quizzes</a></li>
              <li><a class="hover:underline" href="#">AI tutor</a></li>
            </ul>
          </div>

          <div class="rounded-xl bg-card p-4 shadow-sm hidden sm:block">
            <p class="font-medium mb-2">Newsletter</p>
            <p class="text-sm text-muted-foreground mb-3">
              Get new posts in your inbox.
            </p>
            <form action="/api/subscribe" method="post" class="space-y-2">
              <input
                name="email"
                type="email"
                required
                placeholder="you@domain.com"
                class="w-full rounded-md px-3 py-2 text-sm"
              />
              <button
                class="w-full rounded-md bg-black text-white py-2 text-sm hover:bg-neutral-800 transition"
              >
                Subscribe
              </button>
            </form>
          </div>
        </div>
      </aside>
    </div>
  </div>

  <!-- Lightweight scrollspy for ToC -->
  <script is:inline>
    const links = Array.from(document.querySelectorAll(".toc-link"));
    if (links.length) {
      const map = new Map(
        links
          .map((a) => [
            a,
            document.getElementById(a.getAttribute("href").slice(1)),
          ])
          .filter(([, el]) => !!el)
      );

      const clear = () =>
        links.forEach((l) =>
          l.classList.remove("bg-muted/60", "text-foreground", "font-medium")
        );

      const io = new IntersectionObserver(
        (entries) => {
          // берём ближайший к верхней границе
          const visible = entries
            .filter((e) => e.isIntersecting)
            .sort(
              (a, b) =>
                Math.abs(a.boundingClientRect.top) -
                Math.abs(b.boundingClientRect.top)
            )[0];

          if (visible) {
            clear();
            for (const [link, el] of map.entries()) {
              if (el === visible.target) {
                link.classList.add(
                  "bg-muted/60",
                  "text-foreground",
                  "font-medium"
                );
                break;
              }
            }
          }
        },
        { rootMargin: "0px 0px -70% 0px", threshold: 0.1 }
      );

      map.forEach((el) => io.observe(el));

      // smooth scroll
      links.forEach((a) => {
        a.addEventListener("click", (e) => {
          e.preventDefault();
          const id = a.getAttribute("href").slice(1);
          const el = document.getElementById(id);
          if (el) el.scrollIntoView({ behavior: "smooth", block: "start" });
          history.pushState(null, "", `#${id}`);
          clear();
          a.classList.add("bg-muted/60", "text-foreground", "font-medium");
        });
      });
    }
  </script>
</Root>
