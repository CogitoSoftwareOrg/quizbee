---
interface Testimonial {
  text: string;
  author: string;
  role: string;
  rating: number;
  avatar?: string;
}

interface Props {
  title: string;
  subtitle?: string;
  testimonials: Testimonial[];
  theme?: "default" | "dark" | "gradient";
}

const { title, subtitle, testimonials, theme = "default" } = Astro.props;

const themeClasses = {
  default: "",
  dark: "bg-base-300",
  gradient: "bg-gradient-to-br from-secondary/5 to-accent/5",
};
---

<section
  class={`testimonials-section w-full py-16 lg:py-24 ${themeClasses[theme]}`}
>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <!-- Header -->
    <div class="text-center mb-16 space-y-4">
      {
        subtitle && (
          <p class="text-sm font-semibold text-secondary uppercase tracking-wide">
            {subtitle}
          </p>
        )
      }

      <h2 class="text-4xl lg:text-5xl font-bold leading-tight">
        {title}
      </h2>
    </div>

    <!-- Testimonials Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {
        testimonials.map((testimonial, index) => (
          <div
            class="group transition-all duration-700 ease-out opacity-0 translate-y-8"
            data-animate="testimonial"
            style={`transition-delay: ${index * 100}ms`}
          >
            <div class="relative h-full p-8 rounded-2xl border transition-all duration-300 bg-base-100 shadow-lg hover:shadow-xl hover:-translate-y-2 hover:border-secondary/30 group-hover:bg-secondary/5">
              <!-- Rating Stars -->
              <div class="flex gap-1 mb-4">
                {Array.from({ length: 5 }).map((_, i) => (
                  <svg
                    class={`w-5 h-5 ${i < testimonial.rating ? "text-warning" : "text-base-300"}`}
                    fill="currentColor"
                    viewBox="0 0 20 20"
                  >
                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                  </svg>
                ))}
              </div>

              <!-- Testimonial Text -->
              <blockquote class="text-base-content/80 leading-relaxed mb-6 italic">
                "{testimonial.text}"
              </blockquote>

              <!-- Author -->
              <div class="flex items-center gap-3 pt-4 border-t border-base-200">
                {testimonial.avatar ? (
                  <img
                    src={testimonial.avatar}
                    alt={testimonial.author}
                    class="w-12 h-12 rounded-full object-cover"
                  />
                ) : (
                  <div class="w-12 h-12 rounded-full bg-secondary/20 flex items-center justify-center">
                    <span class="text-lg font-bold text-secondary">
                      {testimonial.author.charAt(0)}
                    </span>
                  </div>
                )}
                <div>
                  <div class="font-bold text-base-content">
                    {testimonial.author}
                  </div>
                  <div class="text-sm text-base-content/60">
                    {testimonial.role}
                  </div>
                </div>
              </div>

              <!-- Hover Indicator -->
              <div class="absolute top-4 right-4 opacity-0 group-hover:opacity-100 transition-opacity">
                <div class="w-3 h-3 bg-secondary rounded-full animate-pulse" />
              </div>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</section>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const sections = document.querySelectorAll(".testimonials-section");

    sections.forEach((section) => {
      const animateElements = section.querySelectorAll("[data-animate]");

      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              animateElements.forEach((element) => {
                element.classList.remove("opacity-0", "translate-y-8");
                element.classList.add("opacity-100", "translate-y-0");
              });
            }
          });
        },
        { threshold: 0.1 }
      );

      observer.observe(section);
    });
  });
</script>

